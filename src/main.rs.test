use anyhow::Result;
use clap::{arg, command, Parser};
use rocket::{launch, Build, Rocket};
use std::path::PathBuf;

mod config;
mod http_server;
mod prometheus;
mod providers;

use crate::providers::jellyfin::Jellyfin;
use crate::providers::overseerr::Overseerr;
use crate::providers::radarr::Radarr;
use crate::providers::sonarr::Sonarr;
use crate::providers::tautulli::Tautulli;

#[cfg(debug_assertions)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugLevel;

#[cfg(debug_assertions)]
impl clap_verbosity_flag::LogLevel for DebugLevel {
    fn default() -> Option<log::Level> {
        Some(log::Level::Debug)
    }
}

#[cfg(debug_assertions)]
type DefaultLogLevel = DebugLevel;

#[cfg(not(debug_assertions))]
type DefaultLogLevel = clap_verbosity_flag::WarnLevel;

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    #[clap(flatten)]
    verbose: clap_verbosity_flag::Verbosity<DefaultLogLevel>,
    #[arg(short, long)]
    config: PathBuf,
}

//#[tokio::main]
//async fn main() {
//let tautulli = Tautulli::new(config.tautulli.address, config.tautulli.api_key);
//let sonarr = Sonarr::new(config.sonarr.address, config.sonarr.api_key);
//let session_summaries = tautulli.get_session_summary().await;

//
//for item in session_summaries.expect("Failed to get session summaries") {
//    println!("{}", item);
//}
//let shows = sonarr.get_today_shows().await;
////let status = sonarr.debug("system/status").await;
//for item in shows {
//    println!("{}", item);
//}
//}
//#[launch]
//pub async fn start_server() -> Rocket<Build> {
//    let args = Args::parse();
//
//    let log_level = args
//        .verbose
//        .log_level()
//        .expect("Log level cannot be not available");
//
//    simple_logger::init_with_level(log_level).expect("Logging successfully initialized");
//    let config = config::read(args.config.clone(), log_level).expect("Config successfully read");
//    http_server::configure_rocket(config).await
#[tokio::main]
async fn main() -> Result<()> {
    //let sonarr_config = config.sonarr.clone().expect("Sonarr config not found");
    //let sonarr = Sonarr::new(sonarr_config.address, sonarr_config.api_key);
    //let shows = sonarr.get_today_shows();
    //for item in shows {
    //    println!("{}", item);
    //}
    let args = Args::parse();
    let log_level = args
        .verbose
        .log_level()
        .expect("Log level cannot be not available");
    let config = config::read(args.config.clone(), log_level)?;
    //let jelly_conf = config.jellyfin.expect("Jellyfin config not found");
    //for (name, j) in jelly_conf {
    //    let jellyfin = Jellyfin::new(&name, &j.address, &j.api_key)?;
    //    let session = jellyfin.get_sessions().await?;
    //    println!("{:?}", session);
    //}

    let plex = config.plex.expect("plex config not found");
    for (name, p) in plex {
        let plex = providers::plex::Plex::new(&name, &p.address, &p.token)?;
        let users = plex.get_users().await;
        for user in users {
            println!("{:?}", user);
        }
    }
    //    let history = match plex.get_history().await {
    //        Ok(history) => history,
    //        Err(e) => {
    //            eprintln!("Failed to get history: {}", e);
    //            std::process::exit(1);
    //        }
    //    };
    //    let mut count_movie = 0;
    //    let mut episode_count = 0;
    //    history.media_container.metadata.iter().for_each(|item| {
    //        if item.type_field == "episode" {
    //            episode_count += 1;
    //        } else if item.type_field == "movie" {
    //            count_movie += 1;
    //        }
    //    });
    //    println!("Movies watch: {}", count_movie);
    //    println!("Episodes watch: {}", episode_count);
    //}

    //let overseerr_cfg = config.overseerr.clone().expect("Radarr config not found");
    //let overseerr = Overseerr::new(overseerr_cfg.address, overseerr_cfg.api_key)?;
    //let requests = overseerr.get_overseerr_requests()?;
    //for item in requests {
    //    println!("{:?}", item);
    //}
    Ok(())
    //let tautulli_cfg = config.tautulli.clone().expect("Tautulli config not found");
    //let tautulli = Tautulli::new(tautulli_cfg.address, tautulli_cfg.api_key);
    //let libraries = tautulli.get_libraries().expect("Failed to get libraries");
    //for item in libraries {
    //    println!("{}", item);
    //}
    //println!("{:?}", tautulli.get_session_summary());
    //let session_summaries = tautulli.get_session_summary().await;

    //
    //for item in session_summaries.expect("Failed to get session summaries") {
    //    println!("{}", item);
    //}
    //let shows = sonarr.get_today_shows().await;
    ////let status = sonarr.debug("system/status").await;
    //for item in shows {
    //    println!("{}", item);
    //}
}
